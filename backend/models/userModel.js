const mongoose = require('mongoose');
const validator = require('validator'); // importing validator module to check the email is correct or not
const bcrypt = require('bcrypt'); // used to encrypt the password
const jwt = require('jsonwebtoken'); // creates a token when the user login
const crypto = require('crypto'); // used to reset the password 

const userschema = new mongoose.Schema({
    name:{
        type:String,
        required:[true,'Please enter the Name of the user']
    },
    email:{
        type:String,
        required : [true,'Please enter email of the user'],
        unique: true, // this field is used to set the email is unique so no two email will not same
        validate:[validator.isEmail,'Please enter valid email address']
    },
    password:{
        type:String,
        required: [true,'Please enter the Password'],
        maxlength:[6,'Password cannot exceed 6 characters'],
        select : false // we are giving false because we always don't need pasword always
    },
    
    role:{
        type:String,
        default:'user'
    },
    resetPasswordToken:{
        type:String
    },
    resetPasswordTokenExpire :{
        type: Date

    },
    createdAt:{
        type:Date,
        default :Date.now()
    }

})
// this is a middleware it is used to encrypt the password
userschema.pre('save', async function(next){
   
    this.password =  await bcrypt.hash(this.password,10);
}) // pre - to done a work before the save method also it has more method here save is given because we lways use save method to create and update hash is used to create the value which is encrypted the password 

userschema.methods.getJwtToken = function (){
   return jwt.sign({id:this.id},process.env.JWT_SECRET,{ // generate the jwt token with the id of the user and the jwt secret code
        expiresIn:process.env.JWT_EXPIRES_TIME
    })

}
userschema.methods.isValidPassword =  async function(password){
    const isCorrect = await  bcrypt.compare(password, this.password) // it will comapare the password entered by the user in the login page with the password in the database by doing all the security operation
    return isCorrect; 

}
// reset the password - if the user forget the password 
userschema.methods.getResetToken = function(){
    //Generate the token
     const token = crypto.randomBytes(20).toString('hex'); // randomBytes will generate the random buffer generated by computer with size 20 and we converting into string that string is encoded in hexadecimal form

     this.resetPasswordToken = crypto.createHash('sha256').update(token).digest('hex'); //generate Hash and set to reset token

     //set token expire time 
     this.resetPasswordTokenExpire = Date.now() + 30 * 60 * 1000; // the time will be the time the token generates to 30 mins after that the token will get expired 
     return token ;

}

let model = mongoose.model('user',userschema);
module.exports = model; 